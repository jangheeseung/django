디자인 패턴 이란
객체 지향 프로그래밍 설계를 할 때 자주 발생하는 문제들을 피하기 위해 사용되는 패턴

일반적인 패턴에는 
1 패턴 이름(pattern name)은 한두 단어로 설계 문제와 해법을 서술
2 문제(problem)는 언제 패턴을 사용하는가를 서술하며 해결할 문제와 그 배경을 설명
3 해법(solution)은 설계를 구성하는 요소들과 그 요소들 간의 관계 책임 그리고 협력 관계를 서술
4 결과(consequence)는 디자인 패턴을 적용해서 얻는 결과와 장단점을 서술

이런 네가지 요소가 들어간다.

디자인 패턴 구조
-콘텍스트(context)
	-문제가 발생하는 여어 상황을 기술한다. 즉, 패턴이 적용될 수 있는 상황을 나타낸다.
	-경우에 따라서는 패턴이 유용하지 못한 상황을 나타내기도 한다.
-문제(problem)
	-패턴이 적용되어 해결될 필요가 있는 여러 디자인 이슈들을 기술한다.
	-이때 여러 제약 사항과 영향력도 문제 해결을 위해 고려해야 한다.
-해결(solution)
	-문제를 해결하도록 설계를 구성하는 요소들과 그 요소들 사이의 관계, 책임, 협력 관계를 기술한다.
	-해결은 반드시 구체적인 구현 방법이나 언어에 의존적이지 않으며 다양한 상황에 
		적용할 수 있는 일종의 템플릿이다.

디자인 패턴의 종류
-GOF디자인 패턴
생성(creational)->객체 생성 관련
구조(structural)->클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
행위(behavioral)->객체나 클래스 사이의 알고리즘이나 책임 분배와 관련된 패턴

http://sungsoo.github.io/2018/03/19/design-patterns-in-python.html 

----------------------------------------------------------------------------------------------
MTV
M-MODEL(DB를 다루는 곳)
T-TEMPLATE(HTML-보여주기)
V-VIEW(데이터가 어떻게 처리 될지 알려주는 함수가 모여 있는곳)
MTV가 각자 독립적으로 임무를 수행하면서 ->장고 전체가 구동된다.

MVC(MTV가 차용한 방식)
M-MODEL(DB를 다루는곳)
V-VIEW(사용자가 보는 화면)
C-CONTROLLER(중간 관리자)

실세
MTV는 VIEW
MVC는 CONTROLLER
----------------------------------------------------------------------------------------
django
장점
 -python언어를 기반으로 해서 굉장히 쉽게 배울수 있다.
 -인증,관리와 같은 기본적이고 대부분의 사이트에서 사용하는 기능들이 기본 모듈로 제공된다.
 -높은 코드 완성도를 유지할 수 있다.
 -ide지원이 훌륭하다
 
단점
 -한글문서가 적다
 -성능 문제에서 자유롭지 않다.
 -typeless언어의 약점을 그대로 보유 중이다.
 -django의 문제를 python으로 해결해야 한다.
